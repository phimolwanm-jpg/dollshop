import customtkinter as ctk
from models import Product 
from tkinter import messagebox 

class ProductListWindow(ctk.CTkFrame):
    def __init__(self, parent, main_app):
        super().__init__(parent, fg_color="#FFF0F5")  # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
        self.main_app = main_app
        # ‡∏î‡∏∂‡∏á object ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å main_app
        self.db = main_app.db
        self.cart = main_app.cart
        # --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ---
        self.category_filter = None # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á (None = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
        self.current_product_list = [] # List ‡∏Ç‡∏≠‡∏á product (dict) ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ StringVar ‡∏Ç‡∏≠‡∏á tkinter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        self.search_term_var = ctk.StringVar() 
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ StringVar ‡∏Ç‡∏≠‡∏á tkinter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
        self.sort_option_var = ctk.StringVar(value="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î") # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        self.setup_ui() 
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô on_show)

    def on_show(self, category=None):
        """
        ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ: ‡∏£‡∏±‡∏ö category, ‡∏•‡πâ‡∏≤‡∏á UI ‡πÄ‡∏Å‡πà‡∏≤, ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà, ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        # 1. ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ category ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.category_filter = category 
        # 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        self.search_term_var.set("") 
        
        # 3. ‡∏•‡∏ö widget ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏¥‡πâ‡∏á
        for widget in self.winfo_children():
            widget.destroy()
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.setup_ui() 
        # 5. ‡∏™‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å display_products ‡∏ï‡πà‡∏≠)
        self.load_products() 

    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Grid ‡∏´‡∏•‡∏±‡∏Å ---
        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 (container) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        self.grid_rowconfigure(1, weight=1) 
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        self.grid_columnconfigure(0, weight=1) 

        # --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (Header), Search, ‡πÅ‡∏•‡∏∞ Filter ---
        header_frame = ctk.CTkFrame(self, # ‡πÉ‡∏™‡πà header ‡πÉ‡∏ô ProductListWindow (self)
                                    fg_color="#FFFFFF", 
                                    corner_radius=0, 
                                    height=90, # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á header
                                    border_width=1, 
                                    border_color="#FFEBEE")
        # ‡∏ß‡∏≤‡∏á header ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î (row=0) ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (sticky="ew")
        header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 20)) 
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 1 ‡πÉ‡∏ô header ‡∏Ç‡∏¢‡∏≤‡∏¢ (‡∏î‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô search/sort ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤)
        header_frame.grid_columnconfigure(1, weight=1) 

        # --- 2.1 Frame ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà) ---
        left_header_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        left_header_frame.pack(side="left", padx=20, pady=20)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö "<"
        back_button = ctk.CTkButton(
            left_header_frame,
            text="<",
            width=40, height=40, corner_radius=10, # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ
            fg_color="#FFB6C1", hover_color="#FFC0CB", # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
            font=ctk.CTkFont(size=18, weight="bold"),
            command=lambda: self.main_app.navigate_to('HomeWindow') # ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Home
        )
        back_button.pack(side="left")
        
        # Label ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏´‡∏£‡∏∑‡∏≠ "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö self.category_filter ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å on_show
        if self.category_filter:
            title_display_text = f"üõçÔ∏è {self.category_filter}" 
        else:
            title_display_text = "üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            
        category_title_label = ctk.CTkLabel(
            left_header_frame,
            text=title_display_text,
            font=ctk.CTkFont(size=26, weight="bold"),
            text_color="#FFB6C1"
        )
        category_title_label.pack(side="left", padx=15)

        # --- 2.2 Frame ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ (‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á) ---
        right_header_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        right_header_frame.pack(side="right", padx=20, pady=20)

        # ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_entry = ctk.CTkEntry(
            right_header_frame,
            textvariable=self.search_term_var, # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ search_term_var
            placeholder_text="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...",
            width=250, height=40, corner_radius=15,
            border_width=1, border_color="#FFEBEE",
            fg_color="#FFF0F5", # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            font=ctk.CTkFont(size=14)
        )
        search_entry.pack(side="left", padx=5)
        # ‡∏ú‡∏π‡∏Å event: ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î Enter ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å load_products()
        search_entry.bind("<Return>", lambda event: self.load_products()) 

        # ‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á (Dropdown)
        sort_option_menu = ctk.CTkOptionMenu(
            right_header_frame,
            variable=self.sort_option_var, # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ sort_option_var
            values=["‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á", "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥", "‡∏ä‡∏∑‡πà‡∏≠: A-Z"], # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            command=self.sort_products, # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å sort_products
            width=150, height=40, corner_radius=15,
            fg_color="#FFB6C1", # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏ô‡∏π
            button_color="#FF6B9D", # ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏° dropdown
            button_hover_color="#FF8FB3",
            font=ctk.CTkFont(size=14)
        )
        sort_option_menu.pack(side="left", padx=5)
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô Header ---

        # --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Grid ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
        product_grid_container = ctk.CTkFrame(self, fg_color="transparent")
        # ‡∏ß‡∏≤‡∏á container ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 1 (‡πÉ‡∏ï‡πâ header) ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        product_grid_container.grid(row=1, column=0, sticky="nsew") 
        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 (products_frame_scrollable) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        product_grid_container.grid_rowconfigure(1, weight=1) 
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        product_grid_container.grid_columnconfigure(0, weight=1) 
        
        # --- 3.1 Label ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏à‡∏∞ update ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á) ---
        self.results_count_label = ctk.CTkLabel(
            product_grid_container,
            text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...", # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            font=ctk.CTkFont(size=14),
            text_color="#6D4C41"
        )
        # ‡∏ß‡∏≤‡∏á label ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô
        self.results_count_label.grid(row=0, column=0, sticky="w", padx=30, pady=10) 
        
        # --- 3.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á Grid ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
        self.products_frame_scrollable = ctk.CTkScrollableFrame(
            product_grid_container, # ‡πÉ‡∏™‡πà‡πÉ‡∏ô container
            fg_color="transparent",
            scrollbar_button_color="#FFB6C1"
        )
        # ‡∏ß‡∏≤‡∏á frame ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 1 ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        self.products_frame_scrollable.grid(row=1, column=0, sticky="nsew", padx=20, pady=5) 
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô (uniform="col")
        for i in range(4):
            self.products_frame_scrollable.grid_columnconfigure(i, weight=1, uniform="col") 
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ---
        # --- ‡∏à‡∏ö setup_ui ---

    def load_products(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° category ‡πÅ‡∏•‡∏∞ search term"""
        # 1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ StringVar (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
        search_keyword = self.search_term_var.get().strip().lower() 
        
        # 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡πà‡∏á category ‡πÅ‡∏•‡∏∞ keyword ‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏á)
        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á Dictionary
        product_data_from_db = self.db.get_all_products(
            category=self.category_filter, 
            search_term=search_keyword
        )
        # 3. ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™
        self.current_product_list = product_data_from_db 
        
        # 4. ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sort_products (‡∏û‡∏£‡πâ‡∏≠‡∏° option ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ)
        current_sort_option = self.sort_option_var.get()
        self.sort_products(current_sort_option) 

    def sort_products(self, sort_option):
        """‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (self.current_product_list)"""
        
        # --- 1. ‡πÅ‡∏õ‡∏•‡∏á List ‡∏Ç‡∏≠‡∏á Dictionary ‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á Product Object ---
        # (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ sort ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ attribute ‡∏Ç‡∏≠‡∏á object ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢)
        product_object_list = []
        for product_dict in self.current_product_list:
            product_obj = Product.from_dict(product_dict)
            product_object_list.append(product_obj)
        
        # --- 2. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á List ‡∏Ç‡∏≠‡∏á Object ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ---
        if sort_option == "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° created_at (‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤)
            # lambda x: x.created_at ‡∏Ñ‡∏∑‡∏≠ ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ sort ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ created_at ‡πÄ‡∏õ‡πá‡∏ô key
            # or '' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ñ‡πâ‡∏≤ created_at ‡πÄ‡∏õ‡πá‡∏ô None
            # reverse=True ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
            product_object_list.sort(key=lambda product: product.created_at or '', reverse=True) 
        elif sort_option == "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á":
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° price (‡∏ô‡πâ‡∏≠‡∏¢ -> ‡∏°‡∏≤‡∏Å)
            product_object_list.sort(key=lambda product: product.price) 
        elif sort_option == "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥":
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° price (‡∏°‡∏≤‡∏Å -> ‡∏ô‡πâ‡∏≠‡∏¢)
            product_object_list.sort(key=lambda product: product.price, reverse=True) 
        elif sort_option == "‡∏ä‡∏∑‡πà‡∏≠: A-Z":
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° name (A -> Z)
            product_object_list.sort(key=lambda product: product.name) 
        
        # --- 3. (Optional) ‡πÅ‡∏õ‡∏•‡∏á List ‡∏Ç‡∏≠‡∏á Object ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á Dictionary ---
        
        # --- ‡πÉ‡∏ä‡πâ List ‡∏Ç‡∏≠‡∏á Object ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏•‡∏¢ ---
        # ‡∏™‡πà‡∏á List ‡∏Ç‡∏≠‡∏á Product Object ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÉ‡∏´‡πâ display_products
        self.display_products(product_object_list) 

    def display_products(self, sorted_product_objects):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (List ‡∏Ç‡∏≠‡∏á Product Object) ‡∏•‡∏á‡∏ö‡∏ô Grid"""
        
        # --- 1. ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô Grid ‡∏ó‡∏¥‡πâ‡∏á ---
        # self.products_frame_scrollable ‡∏Ñ‡∏∑‡∏≠ frame ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ
        for widget in self.products_frame_scrollable.winfo_children():
            widget.destroy()

        # --- 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Label ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
        number_of_products = len(sorted_product_objects)
        self.results_count_label.configure(text=f"üì¶ ‡∏û‡∏ö {number_of_products} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
        if not sorted_product_objects:
            # --- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á ---
            empty_frame = ctk.CTkFrame(self.products_frame_scrollable, # ‡πÉ‡∏™‡πà‡πÉ‡∏ô frame ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ
                                       fg_color="#FFFFFF", 
                                       corner_radius=20, 
                                       border_width=2, 
                                       border_color="#FFEBEE")
            # columnspan=4 ‡πÉ‡∏´‡πâ frame ‡∏ô‡∏µ‡πâ‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            empty_frame.grid(row=0, column=0, columnspan=4, pady=50, padx=20, sticky="ew") 
            
            empty_label = ctk.CTkLabel(
                empty_frame,
                text="üò¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#FFB6C1"
            )
            empty_label.pack(pady=40)
            return # ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î

        # --- 4. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏•‡∏á Grid ---
        cols = 4 # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        for i, product_object in enumerate(sorted_product_objects):
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ñ‡∏ß (row) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (col)
            row, col = divmod(i, cols) 
            
            # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 1 ‡πÉ‡∏ö (‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å create_product_card ‡πÄ‡∏î‡∏¥‡∏°) --- 
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
            product_card = ctk.CTkFrame(self.products_frame_scrollable, # ‡πÉ‡∏™‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡πÉ‡∏ô frame ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ
                                        fg_color="#FFFFFF", 
                                        corner_radius=15, 
                                        border_width=2, 
                                        border_color="#FFEBEE")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            # ‡πÉ‡∏ä‡πâ main_app.get_product_image 
            product_card_image = self.main_app.get_product_image(product_object.image_url) 
            image_label_card = ctk.CTkLabel(product_card, text="", image=product_card_image, bg_color="transparent")
            image_label_card.pack(pady=(15, 10))

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            name_label_card = ctk.CTkLabel(
                product_card,
                text=product_object.name, # ‡πÉ‡∏ä‡πâ .name ‡∏à‡∏≤‡∏Å object
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#6D4C41"
            )
            name_label_card.pack(padx=10, fill="x") # fill="x" ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å get_stock_status() ‡∏à‡∏≤‡∏Å Product object
            stock_display_text, stock_text_color = product_object.get_stock_status() 
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            stock_status_frame = ctk.CTkFrame(product_card, fg_color="#FFF0F5", corner_radius=8)
            stock_status_frame.pack(pady=5)
            # Label ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å get_stock_status)
            stock_status_label = ctk.CTkLabel(
                stock_status_frame,
                text=stock_display_text,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color=stock_text_color 
            )
            stock_status_label.pack(padx=10, pady=3)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            price_label_card = ctk.CTkLabel(
                product_card,
                text=product_object.format_price(), # ‡πÉ‡∏ä‡πâ format_price() ‡∏à‡∏≤‡∏Å object
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#FF6B9D"
            )
            price_label_card.pack(pady=5)
            
            # ‡∏õ‡∏∏‡πà‡∏° "‡∏´‡∏¢‡∏¥‡∏ö‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"
            add_cart_button_card = ctk.CTkButton(
                product_card,
                text="üõí ‡∏´‡∏¢‡∏¥‡∏ö‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤",
                height=40, corner_radius=10,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#FFB6C1", hover_color="#FFC0CB", text_color="white",
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state (normal/disabled) ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å is_available() ‡∏à‡∏≤‡∏Å object
                state="normal" if product_object.is_available() else "disabled", 
                # ‡πÉ‡∏ä‡πâ lambda capture (p=product_object)
                command=lambda p=product_object: self.add_to_cart(p) 
            )
            add_cart_button_card.pack(pady=10, padx=15, fill="x")
            # --- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 1 ‡πÉ‡∏ö ---

            # ‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡πÉ‡∏ô Grid ‡∏ï‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ
            product_card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew") 
        # --- ‡∏à‡∏ö Loop ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î ---

    def add_to_cart(self, product): # ‡∏£‡∏±‡∏ö Product object ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á popup"""
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Cart object (‡∏ó‡∏µ‡πà main_app ‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        self.cart.add_item(product) 
        # ‡πÅ‡∏™‡∏î‡∏á popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        messagebox.showinfo("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", f"‡πÄ‡∏û‡∏¥‡πà‡∏° '{product.name}' ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!", parent=self)