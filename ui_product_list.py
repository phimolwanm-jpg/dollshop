import customtkinter as ctk
from models import Product 
from tkinter import messagebox 

class ProductListWindow(ctk.CTkFrame):
    def __init__(self, parent, main_app):
        super().__init__(parent, fg_color="#FFF0F5")  # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
        self.main_app = main_app
        self.db = main_app.db
        self.cart = main_app.cart
        self.category_filter = None 
        self.current_product_list = [] 
        self.search_term_var = ctk.StringVar() 
        self.sort_option_var = ctk.StringVar(value="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î") 

        self.setup_ui() 

    # --- (EDITED) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç on_show ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö search_term ‡πÑ‡∏î‡πâ ---
    def on_show(self, category=None, search_term=None):
        """
        ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ: ‡∏£‡∏±‡∏ö category, ‡∏•‡πâ‡∏≤‡∏á UI ‡πÄ‡∏Å‡πà‡∏≤, ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà, ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        # 1. ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ category ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.category_filter = category 
        
        # 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
        self.search_term_var.set("") 
        
        # --- (NEW) 2.5 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ search_term ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
        if search_term:
            print(f"ProductList received search_term: {search_term}")
            self.category_filter = None # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô None (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°)
            self.search_term_var.set(search_term) # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        # --- (‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô NEW) ---
        
        # 3. ‡∏•‡∏ö widget ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏¥‡πâ‡∏á
        for widget in self.winfo_children():
            widget.destroy()
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.setup_ui() 
        
        # 5. ‡∏™‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ search_term_var ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ)
        self.load_products() 

    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Grid ‡∏´‡∏•‡∏±‡∏Å ---
        self.grid_rowconfigure(1, weight=1) 
        self.grid_columnconfigure(0, weight=1) 

        # --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (Header), Search, ‡πÅ‡∏•‡∏∞ Filter ---
        header_frame = ctk.CTkFrame(self, 
                                    fg_color="#FFFFFF", 
                                    corner_radius=0, 
                                    height=90, 
                                    border_width=1, 
                                    border_color="#FFEBEE")
        header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 20)) 
        header_frame.grid_columnconfigure(1, weight=1) 

        # --- 2.1 Frame ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà) ---
        left_header_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        left_header_frame.pack(side="left", padx=20, pady=20)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö "<"
        back_button = ctk.CTkButton(
            left_header_frame,
            text="<",
            width=40, height=40, corner_radius=10, 
            fg_color="#FFB6C1", hover_color="#FFC0CB", 
            font=ctk.CTkFont(size=18, weight="bold"),
            command=lambda: self.main_app.navigate_to('HomeWindow') 
        )
        back_button.pack(side="left")
        
        # --- (EDITED) Label ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏´‡∏£‡∏∑‡∏≠ "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") ---
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö self.category_filter ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å on_show
        if self.category_filter:
            title_display_text = f"üõçÔ∏è {self.category_filter}" 
        # (NEW) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å search_term_var)
        elif self.search_term_var.get(): 
            title_display_text = f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: '{self.search_term_var.get()}'"
        else:
            title_display_text = "üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            
        category_title_label = ctk.CTkLabel(
            left_header_frame,
            text=title_display_text,
            font=ctk.CTkFont(size=26, weight="bold"),
            text_color="#FFB6C1"
        )
        category_title_label.pack(side="left", padx=15)

        # --- 2.2 Frame ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ (‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á) ---
        right_header_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        right_header_frame.pack(side="right", padx=20, pady=20)

        # ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_entry = ctk.CTkEntry(
            right_header_frame,
            textvariable=self.search_term_var, # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ search_term_var
            placeholder_text="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...",
            width=250, height=40, corner_radius=15,
            border_width=1, border_color="#FFEBEE",
            fg_color="#FFF0F5", 
            font=ctk.CTkFont(size=14)
        )
        search_entry.pack(side="left", padx=5)
        search_entry.bind("<Return>", lambda event: self.load_products()) 

        # ‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á (Dropdown)
        sort_option_menu = ctk.CTkOptionMenu(
            right_header_frame,
            variable=self.sort_option_var, 
            values=["‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á", "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥", "‡∏ä‡∏∑‡πà‡∏≠: A-Z"], 
            command=self.sort_products, 
            width=150, height=40, corner_radius=15,
            fg_color="#FFB6C1", 
            button_color="#FF6B9D", 
            button_hover_color="#FF8FB3",
            font=ctk.CTkFont(size=14)
        )
        sort_option_menu.pack(side="left", padx=5)
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô Header ---
        
        # --- ( ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á setup_ui, load_products, 
        #           sort_products, display_products, add_to_cart 
        #           ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ... ) ---
        
        # --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Grid ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
        product_grid_container = ctk.CTkFrame(self, fg_color="transparent")
        product_grid_container.grid(row=1, column=0, sticky="nsew") 
        product_grid_container.grid_rowconfigure(1, weight=1) 
        product_grid_container.grid_columnconfigure(0, weight=1) 
        
        # --- 3.1 Label ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏à‡∏∞ update ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á) ---
        self.results_count_label = ctk.CTkLabel(
            product_grid_container,
            text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...", 
            font=ctk.CTkFont(size=14),
            text_color="#6D4C41"
        )
        self.results_count_label.grid(row=0, column=0, sticky="w", padx=30, pady=10) 
        
        # --- 3.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á Grid ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
        self.products_frame_scrollable = ctk.CTkScrollableFrame(
            product_grid_container, 
            fg_color="transparent",
            scrollbar_button_color="#FFB6C1"
        )
        self.products_frame_scrollable.grid(row=1, column=0, sticky="nsew", padx=20, pady=5) 
        for i in range(4):
            self.products_frame_scrollable.grid_columnconfigure(i, weight=1, uniform="col") 

    def load_products(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° category ‡πÅ‡∏•‡∏∞ search term"""
        # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å self.search_term_var ‡πÅ‡∏•‡∏∞
        # self.category_filter ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô on_show ‡πÅ‡∏•‡πâ‡∏ß)
        search_keyword = self.search_term_var.get().strip().lower() 
        
        product_data_from_db = self.db.get_all_products(
            category=self.category_filter, 
            search_term=search_keyword
        )
        self.current_product_list = product_data_from_db 
        
        current_sort_option = self.sort_option_var.get()
        self.sort_products(current_sort_option) 

    def sort_products(self, sort_option):
        """‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (self.current_product_list)"""
        # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)
        product_object_list = []
        for product_dict in self.current_product_list:
            product_obj = Product.from_dict(product_dict)
            product_object_list.append(product_obj)
        
        if sort_option == "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
            product_object_list.sort(key=lambda product: product.created_at or '', reverse=True) 
        elif sort_option == "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á":
            product_object_list.sort(key=lambda product: product.price) 
        elif sort_option == "‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥":
            product_object_list.sort(key=lambda product: product.price, reverse=True) 
        elif sort_option == "‡∏ä‡∏∑‡πà‡∏≠: A-Z":
            product_object_list.sort(key=lambda product: product.name) 
        
        self.display_products(product_object_list) 

    def display_products(self, sorted_product_objects):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (List ‡∏Ç‡∏≠‡∏á Product Object) ‡∏•‡∏á‡∏ö‡∏ô Grid"""
        # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)
        for widget in self.products_frame_scrollable.winfo_children():
            widget.destroy()

        number_of_products = len(sorted_product_objects)
        self.results_count_label.configure(text=f"üì¶ ‡∏û‡∏ö {number_of_products} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        if not sorted_product_objects:
            empty_frame = ctk.CTkFrame(self.products_frame_scrollable, 
                                       fg_color="#FFFFFF", 
                                       corner_radius=20, 
                                       border_width=2, 
                                       border_color="#FFEBEE")
            empty_frame.grid(row=0, column=0, columnspan=4, pady=50, padx=20, sticky="ew") 
            empty_label = ctk.CTkLabel(
                empty_frame,
                text="üò¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#FFB6C1"
            )
            empty_label.pack(pady=40)
            return 

        cols = 4 
        for i, product_object in enumerate(sorted_product_objects):
            row, col = divmod(i, cols) 
            
            product_card = ctk.CTkFrame(self.products_frame_scrollable, 
                                        fg_color="#FFFFFF", 
                                        corner_radius=15, 
                                        border_width=2, 
                                        border_color="#FFEBEE")
            
            product_card_image = self.main_app.get_product_image(product_object.image_url) 
            image_label_card = ctk.CTkLabel(product_card, text="", image=product_card_image, bg_color="transparent")
            image_label_card.pack(pady=(15, 10))

            name_label_card = ctk.CTkLabel(
                product_card,
                text=product_object.name, 
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#6D4C41"
            )
            name_label_card.pack(padx=10, fill="x") 
            
            stock_display_text, stock_text_color = product_object.get_stock_status() 
            stock_status_frame = ctk.CTkFrame(product_card, fg_color="#FFF0F5", corner_radius=8)
            stock_status_frame.pack(pady=5)
            stock_status_label = ctk.CTkLabel(
                stock_status_frame,
                text=stock_display_text,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color=stock_text_color 
            )
            stock_status_label.pack(padx=10, pady=3)
            
            price_label_card = ctk.CTkLabel(
                product_card,
                text=product_object.format_price(), 
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#FF6B9D"
            )
            price_label_card.pack(pady=5)
            
            add_cart_button_card = ctk.CTkButton(
                product_card,
                text="üõí ‡∏´‡∏¢‡∏¥‡∏ö‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤",
                height=40, corner_radius=10,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#FFB6C1", hover_color="#FFC0CB", text_color="white",
                state="normal" if product_object.is_available() else "disabled", 
                command=lambda p=product_object: self.add_to_cart(p) 
            )
            add_cart_button_card.pack(pady=10, padx=15, fill="x")

            product_card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew") 

    def add_to_cart(self, product): 
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á popup"""
        # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)
        
        # --- (NEW) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ---
        # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô ui_home.py ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡πÉ‡∏ô ui_product_list.py ‡πÑ‡∏°‡πà‡∏°‡∏µ
        # ‡∏ú‡∏°‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
        if not self.main_app.session.is_logged_in():
             messagebox.showwarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", parent=self)
             return
        # --- (‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô NEW) ---
        
        self.cart.add_item(product) 
        messagebox.showinfo("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", f"‡πÄ‡∏û‡∏¥‡πà‡∏° '{product.name}' ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!", parent=self)