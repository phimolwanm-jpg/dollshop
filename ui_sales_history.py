import customtkinter as ctk
from tkinter import ttk

class SalesHistoryWindow(ctk.CTkFrame):
    def __init__(self, parent, main_app):
        super().__init__(parent, fg_color="#FFF0F5") # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏Å
        self.main_app = main_app
        # ‡∏î‡∏∂‡∏á object database ‡∏à‡∏≤‡∏Å main_app
        self.db = main_app.db 
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        self.setup_ui() 
    
    def on_show(self):
        """
        ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ: ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠
        """
        # ‡∏•‡∏ö widget ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for widget in self.winfo_children():
            widget.destroy()
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà
        self.setup_ui() 

    def setup_ui(self):
        # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Grid ‡∏´‡∏•‡∏±‡∏Å ---
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        self.grid_columnconfigure(0, weight=1) 
        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 (main_frame) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡πÅ‡∏ñ‡∏ß 0=header, 1=stats, 2=table)
        self.grid_rowconfigure(2, weight=1) 

        # --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (Header) ---
        # (‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å create_header ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
        header_frame = ctk.CTkFrame(
            self, # ‡πÉ‡∏™‡πà header ‡πÉ‡∏ô SalesHistoryWindow (self)
            fg_color="#FFFFFF", 
            corner_radius=0, 
            height=70, 
            border_width=1, 
            border_color="#FFEBEE"
        )
        # ‡∏ß‡∏≤‡∏á header ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î (row=0) ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (sticky="ew")
        header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 20)) 
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 1 ‡πÉ‡∏ô header ‡∏Ç‡∏¢‡∏≤‡∏¢ (‡∏î‡∏±‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤)
        header_frame.grid_columnconfigure(1, weight=1) 
        
        # Label ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
        header_title = ctk.CTkLabel(
            header_frame,
            text="üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color="#FFB6C1"
        )
        header_title.pack(side="left", padx=30, pady=20)
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
        header_buttons_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        header_buttons_frame.pack(side="right", padx=20)
        
        # ‡∏õ‡∏∏‡πà‡∏° "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"
        home_button = ctk.CTkButton(
            header_buttons_frame,
            text="üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å",
            command=lambda: self.main_app.navigate_to('HomeWindow'), # ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö Home
            fg_color="transparent",
            text_color="#FFB6C1",
            hover_color="#FFE4E1",
            font=ctk.CTkFont(size=14)
        )
        home_button.pack(side="left", padx=5)
        
        # ‡∏õ‡∏∏‡πà‡∏° "Dashboard"
        dashboard_button = ctk.CTkButton(
            header_buttons_frame,
            text="üìä Dashboard",
            command=lambda: self.main_app.navigate_to('AdminDashboardWindow'), # ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ Dashboard
            fg_color="#4CAF50", # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            hover_color="#66BB6A",
            font=ctk.CTkFont(size=14)
        )
        dashboard_button.pack(side="left", padx=5)
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô Header ---

        # --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ---
        # (‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏≤‡∏Å create_stats_cards ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
        stats_cards_frame = ctk.CTkFrame(self, fg_color="transparent")
        # ‡∏ß‡∏≤‡∏á frame ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 1 (‡πÉ‡∏ï‡πâ header) ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        stats_cards_frame.grid(row=1, column=0, sticky="ew", padx=30, pady=(0, 10)) 
        # ‡πÅ‡∏ö‡πà‡∏á frame ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
        stats_cards_frame.grid_columnconfigure((0, 1, 2, 3), weight=1) 
        
        # --- 3.1 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å DB ---
        dashboard_stats = self.db.get_dashboard_stats() 
        # ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢)
        total_items_sold_count = self.get_total_items_sold() 
        
        # --- 3.2 ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö ---
        all_cards_data = [
            { # ‡∏Å‡∏≤‡∏£‡πå‡∏î 1: ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°
                'title': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°',
                'value': f"{dashboard_stats['total_orders']}",
                'subtitle': '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
                'icon': 'üõí',
                'color': '#4CAF50' # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            },
            { # ‡∏Å‡∏≤‡∏£‡πå‡∏î 2: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                'title': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                'value': f"‡∏ø{dashboard_stats['total_revenue']:,.2f}", # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
                'subtitle': '‡∏ö‡∏≤‡∏ó',
                'icon': 'üí∞',
                'color': '#2196F3' # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
            },
            { # ‡∏Å‡∏≤‡∏£‡πå‡∏î 3: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                'title': '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                'value': f"{dashboard_stats['total_customers']}",
                'subtitle': '‡∏Ñ‡∏ô',
                'icon': 'üë•',
                'color': '#FF9800' # ‡∏™‡∏µ‡∏™‡πâ‡∏°
            },
            { # ‡∏Å‡∏≤‡∏£‡πå‡∏î 4: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                'title': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
                'value': f"{total_items_sold_count}", # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                'subtitle': '‡∏ä‡∏¥‡πâ‡∏ô',
                'icon': 'üì¶',
                'color': '#E91E63' # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
            }
        ]
        
        # --- 3.3 ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö ---
        for i, single_card_data in enumerate(all_cards_data):
            # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡πÉ‡∏ö (‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å create_stat_card ‡πÄ‡∏î‡∏¥‡∏°) ---
            # (‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô loop ‡∏ô‡∏µ‡πâ)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
            stat_card = ctk.CTkFrame(
                stats_cards_frame, # ‡πÉ‡∏™‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡πÉ‡∏ô frame ‡∏ô‡∏µ‡πâ
                fg_color="#FFFFFF",
                corner_radius=15,
                border_width=2,
                border_color="#FFEBEE"
            )
            
            # Icon (Emoji)
            icon_label = ctk.CTkLabel(
                stat_card,
                text=single_card_data['icon'],
                font=ctk.CTkFont(size=40)
            )
            icon_label.pack(pady=(15, 5))
            
            # Title (‡πÄ‡∏ä‡πà‡∏ô '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°')
            title_label = ctk.CTkLabel(
                stat_card,
                text=single_card_data['title'],
                font=ctk.CTkFont(size=12),
                text_color="gray50"
            )
            title_label.pack(pady=2)
            
            # Value (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)
            value_label = ctk.CTkLabel(
                stat_card,
                text=single_card_data['value'],
                font=ctk.CTkFont(size=24, weight="bold"),
                text_color=single_card_data['color'] # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            )
            value_label.pack(pady=2)
            
            # Subtitle (‡πÄ‡∏ä‡πà‡∏ô '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠')
            subtitle_label = ctk.CTkLabel(
                stat_card,
                text=single_card_data['subtitle'],
                font=ctk.CTkFont(size=11),
                text_color="gray40"
            )
            subtitle_label.pack(pady=(2, 15))
            # --- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡πÉ‡∏ö ---
            
            # ‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡πÉ‡∏ô stats_cards_frame ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå i (0, 1, 2, 3)
            stat_card.grid(row=0, column=i, padx=10, sticky="nsew") 
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ---

        # --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°) ---
        main_content_frame = ctk.CTkFrame(
            self, # ‡πÉ‡∏™‡πà‡πÉ‡∏ô SalesHistoryWindow (self)
            fg_color="#FFFFFF",
            corner_radius=20,
            border_width=2,
            border_color="#FFEBEE"
        )
        # ‡∏ß‡∏≤‡∏á frame ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 2 (‡πÉ‡∏ï‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥) ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        main_content_frame.grid(row=2, column=0, sticky="nsew", padx=30, pady=(0, 20)) 
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0 ‡πÉ‡∏ô frame ‡∏ô‡∏µ‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        main_content_frame.grid_columnconfigure(0, weight=1) 
        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 (tree_frame) ‡πÉ‡∏ô frame ‡∏ô‡∏µ‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        main_content_frame.grid_rowconfigure(1, weight=1) 

        # --- 4.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á Title ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
        table_title_frame = ctk.CTkFrame(main_content_frame, fg_color="#FFE4E1", corner_radius=15)
        # ‡∏ß‡∏≤‡∏á title frame ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 0 ‡∏Ç‡∏≠‡∏á main_content_frame
        table_title_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=20) 
        
        table_title_label = ctk.CTkLabel(
            table_title_frame,
            text="üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#6D4C41"
        )
        table_title_label.pack(pady=15)
        
        # --- 4.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Treeview ‡πÅ‡∏•‡∏∞ Scrollbar ---
        # (‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏≤‡∏Å create_sales_table ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
        tree_view_frame = ctk.CTkFrame(main_content_frame, fg_color="transparent")
        # ‡∏ß‡∏≤‡∏á frame ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 1 (‡πÉ‡∏ï‡πâ title) ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        tree_view_frame.grid(row=1, column=0, sticky="nsew", padx=20, pady=(0, 20)) 
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0 (‡∏ï‡∏≤‡∏£‡∏≤‡∏á) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        tree_view_frame.grid_columnconfigure(0, weight=1) 
        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß 0 (‡∏ï‡∏≤‡∏£‡∏≤‡∏á) ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏π‡∏á
        tree_view_frame.grid_rowconfigure(0, weight=1) 
        
        # --- 4.2.1 ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Style ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
        tree_style = ttk.Style()
        tree_style.configure("Sales.Treeview", rowheight=40, font=('Arial', 12)) 
        tree_style.configure("Sales.Treeview.Heading", font=('Arial', 13, 'bold'))
        
        # --- 4.2.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Treeview ---
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        table_columns = ("order_id", "date", "customer", "items", "amount", "payment", "status") 
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡πÉ‡∏™‡πà‡πÉ‡∏ô tree_view_frame
        self.sales_history_tree = ttk.Treeview(
            tree_view_frame,
            columns=table_columns,
            show="headings", # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå #0
            style="Sales.Treeview" # ‡πÉ‡∏ä‡πâ style ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
        )
        
        # --- 4.2.3 ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á ---
        column_headings = {
            "order_id": "Order ID", "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "customer": "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            "items": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "amount": "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô", "payment": "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            "status": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
        }
        column_widths = {
            "order_id": 80, "date": 150, "customer": 180, "items": 300,
            "amount": 120, "payment": 150, "status": 120
        }
        column_anchors = { # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            "order_id": "center", "amount": "e", "status": "center", 
            # ‡∏Ñ‡πà‡∏≤ default ‡∏Ñ‡∏∑‡∏≠ "w" (‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢)
        }
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        for col_name in table_columns:
            self.sales_history_tree.heading(col_name, text=column_headings[col_name])
            self.sales_history_tree.column(
                col_name,
                width=column_widths[col_name],
                # ‡πÉ‡∏ä‡πâ .get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ anchor ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏ä‡πâ 'w' (‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢) ‡πÄ‡∏õ‡πá‡∏ô default
                anchor=column_anchors.get(col_name, "w") 
            )
        
        # --- 4.2.4 ‡∏™‡∏£‡πâ‡∏≤‡∏á Scrollbar ---
        tree_scrollbar = ttk.Scrollbar(tree_view_frame, orient="vertical", command=self.sales_history_tree.yview)
        # ‡∏ú‡∏π‡∏Å scrollbar ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö treeview
        self.sales_history_tree.configure(yscrollcommand=tree_scrollbar.set) 
        
        # ‡∏ß‡∏≤‡∏á treeview ‡πÅ‡∏•‡∏∞ scrollbar ‡∏•‡∏á‡πÉ‡∏ô tree_view_frame ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ grid
        self.sales_history_tree.grid(row=0, column=0, sticky="nsew") # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0
        tree_scrollbar.grid(row=0, column=1, sticky="ns") # scrollbar ‡∏≠‡∏¢‡∏π‡πà ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 1
        
        # --- 4.2.5 ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
        self.load_sales_data() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
        # --- 4.3 ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÉ‡∏ï‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
        action_buttons_frame = ctk.CTkFrame(main_content_frame, fg_color="transparent")
        # ‡∏ß‡∏≤‡∏á frame ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 2 (‡πÉ‡∏ï‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á) ‡∏Ç‡∏≠‡∏á main_content_frame
        action_buttons_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=(0, 20)) 
        
        # --- 4.3.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä" ---
        refresh_button = ctk.CTkButton(
            action_buttons_frame,
            text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä",
            command=self.on_show, # ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å on_show (‡∏•‡∏ö+‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
            fg_color="#FFB6C1", # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
            hover_color="#FFC0CB",
            height=40, corner_radius=10,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        # ‡πÉ‡∏ä‡πâ pack ‡∏ß‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô action_buttons_frame
        refresh_button.pack(side="left", padx=5, fill="x", expand=True) 
        
        # --- 4.3.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" ---
        more_stats_button = ctk.CTkButton(
            action_buttons_frame,
            text="üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
            command=lambda: self.main_app.navigate_to('AdminDashboardWindow'), # ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
            fg_color="#4CAF50", # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            hover_color="#66BB6A",
            height=40, corner_radius=10,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        more_stats_button.pack(side="left", padx=5, fill="x", expand=True)
        
        # --- 4.3.3 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" ---
        manage_orders_button = ctk.CTkButton(
            action_buttons_frame,
            text="üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            command=lambda: self.main_app.navigate_to('AdminOrdersWindow'), # ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ AdminOrders
            fg_color="#2196F3", # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
            hover_color="#42A5F5",
            height=40, corner_radius=10,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        manage_orders_button.pack(side="left", padx=5, fill="x", expand=True)
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á UI ---

    # --- (‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô create_header, create_stats_cards, create_stat_card) ---
    # --- (‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô create_sales_table) ---
    
    def get_total_items_sold(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Logic ‡πÄ‡∏î‡∏¥‡∏°)"""
        db_cursor = None # ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ cursor ‡∏Å‡πà‡∏≠‡∏ô try
        total_sold = 0 # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        try:
            db_cursor = self.db.connect() # ‡πÄ‡∏õ‡∏¥‡∏î connection
            # ‡∏™‡∏±‡πà‡∏á SQL ‡∏£‡∏ß‡∏° quantity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô order_items
            db_cursor.execute("SELECT COALESCE(SUM(quantity), 0) FROM order_items") 
            # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å)
            result = db_cursor.fetchone() 
            if result:
                total_sold = result[0]
        except Exception as e:
            print(f"Error getting total items sold: {e}")
        finally:
            # --- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á close connection ‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠ error ---
            if self.db: # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ self.db ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
                self.db.close() 
        return total_sold
    
    def load_sales_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á (Logic ‡πÄ‡∏î‡∏¥‡∏°)"""
        # --- 1. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
        for item_id in self.sales_history_tree.get_children():
            self.sales_history_tree.delete(item_id)
        
        # --- 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å DB ---
        all_orders_data = self.db.get_all_orders()
        
        # --- 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status ‡πÅ‡∏•‡∏∞ Payment ---
        status_text_map = {
            'pending': '‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            'confirmed': '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
            'shipped': 'üöö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
            'delivered': '‚úîÔ∏è ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            'cancelled': '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
        }
        payment_text_map = {
            '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£': 'üè¶ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
            '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á': 'üì¶ COD',
            'Credit Card': 'üí≥ ‡∏ö‡∏±‡∏ï‡∏£' # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        }
        
        # --- 4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß ---
        for order_dict in all_orders_data:
            # --- 4.1 ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ---
            
            # Order ID (‡πÉ‡∏™‡πà # ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)
            display_order_id = f"#{order_dict['order_id']}"
            
            # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏±‡∏î‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            order_date = order_dict.get('created_at', '-')
            if order_date and len(order_date) > 16:
                order_date = order_date[:16]
                
            # ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ full_name)
            customer_name = order_dict.get('full_name', '-') # ‡πÉ‡∏ä‡πâ .get ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
            
            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß)
            items_string = order_dict.get('items', '')
            if len(items_string) > 50:
                items_display = items_string[:47] + "..." # ‡∏ï‡∏±‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 47 + ...
            elif not items_string:
                items_display = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
            else:
                items_display = items_string
            
            # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô (‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)
            amount_display = f"‡∏ø{order_dict.get('total_amount', 0):,.2f}"
            
            # ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤)
            payment_method = order_dict.get('payment_method', '')
            payment_display = payment_text_map.get(payment_method, payment_method) # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ key ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤)
            status = order_dict.get('status', '')
            status_display = status_text_map.get(status, status) # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ key ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            
            # --- 4.2 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
            self.sales_history_tree.insert("", "end", values=(
                display_order_id,
                order_date,
                customer_name,
                items_display,
                amount_display,
                payment_display,
                status_display
            ))