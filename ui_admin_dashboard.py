import customtkinter as ctk
from tkinter import ttk

class AdminDashboardWindow(ctk.CTkFrame):
    def __init__(self, parent, main_app):
        super().__init__(parent, fg_color="#F8F9FA")
        self.main_app = main_app
        self.db = main_app.db
        
        self.setup_ui()
    
    def on_show(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ"""
        # (‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
        for widget in self.winfo_children():
            widget.destroy()
        self.setup_ui()
    
    def setup_ui(self):
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        # Header
        self.create_header()
        
        # Main Content
        main_frame = ctk.CTkScrollableFrame(self, fg_color="transparent")
        main_frame.grid(row=1, column=0, sticky="nsew", padx=30, pady=20)
        main_frame.grid_columnconfigure((0, 1, 2, 3), weight=1)
        
        # Row 0: Stats Cards
        self.create_stats_cards(main_frame) # Row 0
        
        # Row 1: Sales History Summary (NEW SECTION)
        self.create_sales_history_summary(main_frame) # Row 1
        
        # Row 2: Charts Section (Low Stock / Top Selling)
        chart_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        chart_frame.grid(row=2, column=0, columnspan=4, sticky="ew", pady=20)
        chart_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Top Selling Products
        self.create_top_products_section(chart_frame)
        
        # Low Stock Alert
        self.create_low_stock_section(chart_frame)
        
        # Row 3: Recent Orders
        self.create_recent_orders_section(main_frame) # Row 3 (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Row 2 ‡πÄ‡∏õ‡πá‡∏ô Row 3)
    
    def create_header(self):
        header = ctk.CTkFrame(self, fg_color="white", corner_radius=0, height=70)
        header.grid(row=0, column=0, sticky="ew")
        header.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(
            header, 
            text="üìä Admin Dashboard", 
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color="#2E7D32"
        ).pack(side="left", padx=30)
        
        btn_frame = ctk.CTkFrame(header, fg_color="transparent")
        btn_frame.pack(side="right", padx=20)
        
        ctk.CTkButton(
            btn_frame,
            text="üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å",
            command=lambda: self.main_app.navigate_to('HomeWindow'),
            fg_color="transparent",
            text_color="gray50",
            hover_color="#F5F5F5"
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            btn_frame,
            text="‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            command=lambda: self.main_app.navigate_to('AdminWindow'),
            fg_color="#FF6B9D",
            hover_color="#FF8FB3"
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            btn_frame,
            text="üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            command=lambda: self.main_app.navigate_to('AdminOrdersWindow'),
            fg_color="#2196F3",
            hover_color="#42A5F5"
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            btn_frame,
            text="üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢",
            command=lambda: self.main_app.navigate_to('SalesHistoryWindow'),
            fg_color="#9C27B0",
            hover_color="#BA68C8"
        ).pack(side="left", padx=5)

    # vvvv ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ) vvvv
    def create_sales_history_summary(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"""
        section = ctk.CTkFrame(parent, fg_color="white", corner_radius=15, border_width=1, border_color="#E0E0E0")
        section.grid(row=1, column=0, columnspan=4, sticky="ew", pady=(10, 20))
        section.grid_columnconfigure((0, 1, 2), weight=1)
        
        ctk.CTkLabel(
            section, 
            text="üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", 
            font=ctk.CTkFont(size=18, weight="bold")
        ).grid(row=0, column=0, columnspan=3, pady=(20, 10), padx=20, sticky="w")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô database.py
        data = {
            'day': self.db.get_sales_by_period('day'),
            'month': self.db.get_sales_by_period('month'),
            'year': self.db.get_sales_by_period('year')
        }
        
        # ‡∏´‡∏≤ Total Revenue ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
        daily_revenue = data['day'][0]['total_revenue'] if data['day'] else 0.0
        monthly_revenue = data['month'][0]['total_revenue'] if data['month'] else 0.0
        yearly_revenue = data['year'][0]['total_revenue'] if data['year'] else 0.0
        
        summary_cards = [
            {
                'title': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)',
                'value': f"‡∏ø{daily_revenue:,.2f}",
                'icon': '‚òÄÔ∏è',
                'color': '#FF9800'
            },
            {
                'title': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)',
                'value': f"‡∏ø{monthly_revenue:,.2f}",
                'icon': 'üìÖ',
                'color': '#2196F3'
            },
            {
                'title': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏õ‡∏µ‡∏ô‡∏µ‡πâ)',
                'value': f"‡∏ø{yearly_revenue:,.2f}",
                'icon': 'üóìÔ∏è',
                'color': '#4CAF50'
            }
        ]
        
        for i, card_data in enumerate(summary_cards):
            card = self.create_summary_card(section, card_data)
            card.grid(row=1, column=i, padx=20, pady=(10, 20), sticky="nsew")

    def create_summary_card(self, parent, data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö"""
        card = ctk.CTkFrame(parent, fg_color="#F8F9FA", corner_radius=10)
        card.grid_columnconfigure(1, weight=1)
        
        # Icon
        ctk.CTkLabel(
            card, 
            text=data['icon'], 
            font=ctk.CTkFont(size=30)
        ).grid(row=0, column=0, padx=(15, 5), pady=15, sticky="nsw")
        
        info_frame = ctk.CTkFrame(card, fg_color="transparent")
        info_frame.grid(row=0, column=1, padx=(5, 15), pady=10, sticky="ew")
        info_frame.grid_columnconfigure(0, weight=1)
        
        # Title
        ctk.CTkLabel(
            info_frame, 
            text=data['title'], 
            font=ctk.CTkFont(size=13),
            text_color="gray50",
            anchor="w"
        ).pack(anchor="w")
        
        # Value
        ctk.CTkLabel(
            info_frame, 
            text=data['value'], 
            font=ctk.CTkFont(size=22, weight="bold"),
            text_color=data['color'],
            anchor="w"
        ).pack(anchor="w")
        
        return card
    # ^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ^^^^
    
    def create_stats_cards(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        stats = self.db.get_dashboard_stats()
        
        cards_data = [
            {
                'title': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°',
                'value': f"{stats['total_orders']}",
                'subtitle': '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
                'icon': 'üõí',
                'color': '#4CAF50'
            },
            {
                'title': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                'value': f"‡∏ø{stats['total_revenue']:,.2f}",
                'subtitle': '‡∏ö‡∏≤‡∏ó',
                'icon': 'üí∞',
                'color': '#2196F3'
            },
            {
                'title': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                'value': f"{stats['total_products']}",
                'subtitle': '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                'icon': 'üì¶',
                'color': '#FF9800'
            },
            {
                'title': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                'value': f"{stats['pending_orders']}",
                'subtitle': '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
                'icon': '‚è≥',
                'color': '#F44336'
            }
        ]
        
        for i, card_data in enumerate(cards_data):
            card = self.create_stat_card(parent, card_data)
            card.grid(row=0, column=i, padx=10, pady=10, sticky="nsew")
    
    def create_stat_card(self, parent, data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)"""
        card = ctk.CTkFrame(parent, fg_color="white", corner_radius=15, border_width=1, border_color="#E0E0E0")
        card.grid_columnconfigure(0, weight=1)
        
        # Icon
        icon_label = ctk.CTkLabel(
            card, 
            text=data['icon'], 
            font=ctk.CTkFont(size=40)
        )
        icon_label.grid(row=0, column=0, pady=(20, 10))
        
        # Title
        ctk.CTkLabel(
            card, 
            text=data['title'], 
            font=ctk.CTkFont(size=14),
            text_color="gray50"
        ).grid(row=1, column=0, pady=5)
        
        # Value
        ctk.CTkLabel(
            card, 
            text=data['value'], 
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=data['color']
        ).grid(row=2, column=0, pady=5)
        
        # Subtitle
        ctk.CTkLabel(
            card, 
            text=data['subtitle'], 
            font=ctk.CTkFont(size=12),
            text_color="gray40"
        ).grid(row=3, column=0, pady=(5, 20))
        
        return card
    
    def create_top_products_section(self, parent):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)"""
        section = ctk.CTkFrame(parent, fg_color="white", corner_radius=15)
        section.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        ctk.CTkLabel(
            section, 
            text="üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ Top 5", 
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(pady=(20, 10), padx=20, anchor="w")
        
        top_products = self.db.get_top_selling_products(5)
        
        if top_products:
            for i, product in enumerate(top_products, 1):
                item_frame = ctk.CTkFrame(section, fg_color="#F5F5F5", corner_radius=10)
                item_frame.pack(fill="x", padx=20, pady=5)
                
                rank_label = ctk.CTkLabel(
                    item_frame, 
                    text=f"#{i}", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#FF6B9D",
                    width=40
                )
                rank_label.pack(side="left", padx=10, pady=10)
                
                info_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
                info_frame.pack(side="left", fill="x", expand=True, padx=10)
                
                ctk.CTkLabel(
                    info_frame, 
                    text=product['name'], 
                    font=ctk.CTkFont(size=14, weight="bold"),
                    anchor="w"
                ).pack(anchor="w")
                
                ctk.CTkLabel(
                    info_frame, 
                    text=f"‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {product['total_sold']} ‡∏ä‡∏¥‡πâ‡∏ô | ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ‡∏ø{product['total_revenue']:,.2f}", 
                    font=ctk.CTkFont(size=12),
                    text_color="gray50",
                    anchor="w"
                ).pack(anchor="w")
        else:
            ctk.CTkLabel(
                section, 
                text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", 
                text_color="gray50"
            ).pack(pady=20)
        
        ctk.CTkLabel(section, text="").pack(pady=10)  # Spacer
    
    def create_low_stock_section(self, parent):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)"""
        section = ctk.CTkFrame(parent, fg_color="white", corner_radius=15)
        section.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)
        
        ctk.CTkLabel(
            section, 
            text="‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥", 
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#F44336"
        ).pack(pady=(20, 10), padx=20, anchor="w")
        
        low_stock = self.db.get_low_stock_products(10)
        
        if low_stock:
            for product in low_stock[:5]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                item_frame = ctk.CTkFrame(section, fg_color="#FFEBEE", corner_radius=10)
                item_frame.pack(fill="x", padx=20, pady=5)
                
                info_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
                info_frame.pack(side="left", fill="x", expand=True, padx=15, pady=10)
                
                ctk.CTkLabel(
                    info_frame, 
                    text=product['name'], 
                    font=ctk.CTkFont(size=14, weight="bold"),
                    anchor="w"
                ).pack(anchor="w")
                
                stock_color = "#F44336" if product['stock'] < 5 else "#FF9800"
                ctk.CTkLabel(
                    info_frame, 
                    text=f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {product['stock']} ‡∏ä‡∏¥‡πâ‡∏ô", 
                    font=ctk.CTkFont(size=12),
                    text_color=stock_color,
                    anchor="w"
                ).pack(anchor="w")
        else:
            ctk.CTkLabel(
                section, 
                text="‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚úì", 
                text_color="#4CAF50"
            ).pack(pady=20)
        
        ctk.CTkLabel(section, text="").pack(pady=10)  # Spacer
    
    def create_recent_orders_section(self, parent):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)"""
        section = ctk.CTkFrame(parent, fg_color="white", corner_radius=15)
        section.grid(row=3, column=0, columnspan=4, sticky="nsew", pady=20) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô row 3
        
        ctk.CTkLabel(
            section, 
            text="üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", 
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(pady=(20, 10), padx=20, anchor="w")
        
        # Treeview
        style = ttk.Style()
        style.configure("Dashboard.Treeview", rowheight=35, font=('Arial', 11))
        style.configure("Dashboard.Treeview.Heading", font=('Arial', 12, 'bold'))
        
        columns = ("order_id", "customer", "amount", "status", "date")
        tree = ttk.Treeview(section, columns=columns, show="headings", height=8, style="Dashboard.Treeview")
        
        tree.heading("order_id", text="Order ID")
        tree.heading("customer", text="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        tree.heading("amount", text="‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô")
        tree.heading("status", text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        tree.heading("date", text="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        
        tree.column("order_id", width=80, anchor="center")
        tree.column("customer", width=200)
        tree.column("amount", width=120, anchor="e")
        tree.column("status", width=120, anchor="center")
        tree.column("date", width=150, anchor="center")
        
        tree.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        recent_orders = self.db.get_recent_orders(10)
        
        status_text = {
            'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            'confirmed': '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
            'shipped': '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß',
            'delivered': '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
        }
        
        for order in recent_orders:
            tree.insert("", "end", values=(
                f"#{order['order_id']}",
                order['full_name'],
                f"‡∏ø{order['total_amount']:,.2f}",
                status_text.get(order['status'], order['status']),
                order['created_at'][:16] if order['created_at'] else '-'
            ))