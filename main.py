# M:/doll_shop/main.py (Added load_profile_image function)

import customtkinter as ctk
from PIL import Image
import os
from database import Database
from models import Session, User, Cart
# --- UI Imports ---
from ui_login import LoginWindow
from ui_home import HomeWindow
from ui_admin import AdminWindow
from ui_admin_dashboard import AdminDashboardWindow
from ui_cart import CartWindow
from ui_checkout import CheckoutWindow
from ui_order_history import OrderHistoryWindow
from ui_product_list import ProductListWindow
from ui_admin_orders import AdminOrdersWindow
from ui_profile import ProfileWindow
from ui_thankyou import ThankYouWindow
from ui_receipt import ReceiptWindow
from ui_about import AboutWindow
from ui_sales_history import SalesHistoryWindow
from ui_product_detail import ProductDetailWindow
from ui_admin_users import AdminUsersWindow

class MainApplication(ctk.CTk):
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    """
    def __init__(self):
        super().__init__()
        self.title("üéÄ Dollie Shop üéÄ")
        self.geometry("1280x800")
        self.minsize(1024, 768)
        ctk.set_appearance_mode("light")

        self.db = Database()
        self.session = Session()
        self.cart = Cart()
        self.base_path = os.path.dirname(__file__)

        container_frame = ctk.CTkFrame(self, fg_color="transparent")
        container_frame.pack(side="top", fill="both", expand=True)
        container_frame.grid_rowconfigure(0, weight=1)
        container_frame.grid_columnconfigure(0, weight=1)

        self.all_app_frames = {}

        # --- Create all UI Frames ---
        # (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÜ)
        login_page = LoginWindow(parent=container_frame, main_app=self)
        self.all_app_frames["LoginWindow"] = login_page
        login_page.grid(row=0, column=0, sticky="nsew")

        home_page = HomeWindow(parent=container_frame, main_app=self)
        self.all_app_frames["HomeWindow"] = home_page
        home_page.grid(row=0, column=0, sticky="nsew")

        admin_page = AdminWindow(parent=container_frame, main_app=self)
        self.all_app_frames["AdminWindow"] = admin_page
        admin_page.grid(row=0, column=0, sticky="nsew")

        admin_dashboard_page = AdminDashboardWindow(parent=container_frame, main_app=self)
        self.all_app_frames["AdminDashboardWindow"] = admin_dashboard_page
        admin_dashboard_page.grid(row=0, column=0, sticky="nsew")

        cart_page = CartWindow(parent=container_frame, main_app=self)
        self.all_app_frames["CartWindow"] = cart_page
        cart_page.grid(row=0, column=0, sticky="nsew")

        checkout_page = CheckoutWindow(parent=container_frame, main_app=self)
        self.all_app_frames["CheckoutWindow"] = checkout_page
        checkout_page.grid(row=0, column=0, sticky="nsew")

        order_history_page = OrderHistoryWindow(parent=container_frame, main_app=self)
        self.all_app_frames["OrderHistoryWindow"] = order_history_page
        order_history_page.grid(row=0, column=0, sticky="nsew")

        product_list_page = ProductListWindow(parent=container_frame, main_app=self)
        self.all_app_frames["ProductListWindow"] = product_list_page
        product_list_page.grid(row=0, column=0, sticky="nsew")

        thank_you_page = ThankYouWindow(parent=container_frame, main_app=self)
        self.all_app_frames["ThankYouWindow"] = thank_you_page
        thank_you_page.grid(row=0, column=0, sticky="nsew")

        admin_orders_page = AdminOrdersWindow(parent=container_frame, main_app=self)
        self.all_app_frames["AdminOrdersWindow"] = admin_orders_page
        admin_orders_page.grid(row=0, column=0, sticky="nsew")

        profile_page = ProfileWindow(parent=container_frame, main_app=self)
        self.all_app_frames["ProfileWindow"] = profile_page
        profile_page.grid(row=0, column=0, sticky="nsew")

        receipt_page = ReceiptWindow(parent=container_frame, main_app=self)
        self.all_app_frames["ReceiptWindow"] = receipt_page
        receipt_page.grid(row=0, column=0, sticky="nsew")

        about_page = AboutWindow(parent=container_frame, main_app=self)
        self.all_app_frames["AboutWindow"] = about_page
        about_page.grid(row=0, column=0, sticky="nsew")

        sales_history_page = SalesHistoryWindow(parent=container_frame, main_app=self)
        self.all_app_frames["SalesHistoryWindow"] = sales_history_page
        sales_history_page.grid(row=0, column=0, sticky="nsew")

        product_detail_page = ProductDetailWindow(parent=container_frame, main_app=self)
        self.all_app_frames["ProductDetailWindow"] = product_detail_page
        product_detail_page.grid(row=0, column=0, sticky="nsew")

        admin_users_page = AdminUsersWindow(parent=container_frame, main_app=self)
        self.all_app_frames["AdminUsersWindow"] = admin_users_page
        admin_users_page.grid(row=0, column=0, sticky="nsew")

        print("‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

        self.navigate_to("LoginWindow")

    # --- Image Loading Functions ---
    def load_image(self, image_filename, size):
        image_path = os.path.join(self.base_path, "assets", image_filename)
        try:
            pil_image = Image.open(image_path)
            ctk_image = ctk.CTkImage(pil_image, size=size)
            return ctk_image
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ '{image_filename}': {e}")
            placeholder_image = Image.new('RGB', size, color = 'lightgray')
            ctk_placeholder = ctk.CTkImage(placeholder_image, size=size)
            return ctk_placeholder

    def get_product_image(self, product_image_filename, size=(200, 200)):
        placeholder_img = self.load_image("placeholder.png", size)
        if not product_image_filename:
            return placeholder_img
        product_image_path = os.path.join(self.base_path, "assets", "images", product_image_filename)
        try:
            pil_product_image = Image.open(product_image_path)
            ctk_product_image = ctk.CTkImage(pil_product_image, size=size)
            return ctk_product_image
        except:
            return placeholder_img

    # --- vvvv ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå vvvv ---
    def load_profile_image(self, profile_image_filename, size=(100, 100)):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å assets/profile_pics
        ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ filename ‡πÄ‡∏õ‡πá‡∏ô None/‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ default
        """
        # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå default (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô assets ‡∏ô‡∏∞‡∏Ñ‡∏∞!)
        default_icon = "default_profile.png"

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á
        if not profile_image_filename:
            # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ default
            return self.load_image(default_icon, size)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô assets/profile_pics
        profile_image_path = os.path.join(self.base_path, "assets", "profile_pics", profile_image_filename)
        try:
            # ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
            pil_profile_image = Image.open(profile_image_path)
            # --- Make sure image has an alpha channel for masking ---
            pil_profile_image = pil_profile_image.convert("RGBA")
            ctk_profile_image = ctk.CTkImage(pil_profile_image, size=size)
            return ctk_profile_image
        except FileNotFoundError:
            # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ default
            print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå '{profile_image_filename}', ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ default ‡πÅ‡∏ó‡∏ô")
            return self.load_image(default_icon, size)
        except Exception as e:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ default
            print(f"‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå '{profile_image_filename}': {e}, ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ default ‡πÅ‡∏ó‡∏ô")
            return self.load_image(default_icon, size)
    # --- ^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ^^^^ ---

    # --- Navigation and Callbacks ---
    def navigate_to(self, target_page_name, **extra_data):
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤: {target_page_name}, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ö: {extra_data}")
        target_frame = self.all_app_frames.get(target_page_name)
        if not target_frame:
            print(f"Error: ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Frame ‡∏ä‡∏∑‡πà‡∏≠ '{target_page_name}'!")
            return
        try:
            target_frame.on_show(**extra_data)
            print(f"‡πÄ‡∏£‡∏µ‡∏¢‡∏Å on_show() ‡∏Ç‡∏≠‡∏á {target_page_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except AttributeError:
            print(f"‡∏´‡∏ô‡πâ‡∏≤ {target_page_name} ‡πÑ‡∏°‡πà‡∏°‡∏µ on_show()")
            pass
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å on_show() ‡∏Ç‡∏≠‡∏á {target_page_name}: {e}")
        target_frame.tkraise()

    def on_login_success(self, user_data_dict):
        user_object = User.from_dict(user_data_dict)
        self.session.login(user_object)
        print(f"Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {user_object.username}, Role: {user_object.role}")
        self.navigate_to("HomeWindow")

    def on_logout(self):
        self.session.logout()
        self.cart.clear()
        print("User ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        self.navigate_to("LoginWindow")

# --- Start the Application ---
if __name__ == "__main__":
    app = MainApplication()
    app.mainloop()