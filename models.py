from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional, List

# --- Data Classes  ---
@dataclass
class User:
    user_id: int
    username: str
    email: str
    full_name: str
    phone: Optional[str] = None
    address: Optional[str] = None
    role: str = 'customer'
    created_at: Optional[str] = None
    
    @classmethod
    def from_dict(cls, data):
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main.py
        return cls(
            user_id=data['user_id'],
            username=data['username'],
            email=data['email'],
            full_name=data['full_name'],
            phone=data.get('phone'), # ‡πÉ‡∏ä‡πâ .get() ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô key ‡πÑ‡∏°‡πà‡∏°‡∏µ
            address=data.get('address'),
            role=data.get('role', 'customer'),
            created_at=data.get('created_at')
        )
    
    def is_admin(self) -> bool:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        return self.role == 'admin'

@dataclass
class Product:
    product_id: int
    name: str
    description: str
    price: float
    stock: int
    category: str
    image_url: Optional[str] = None
    created_at: Optional[str] = None
    
    @classmethod
    def from_dict(cls, data):
        return cls(
            product_id=data['product_id'],
            name=data['name'],
            description=data.get('description'),
            price=data['price'],
            stock=data['stock'],
            category=data.get('category'),
            image_url=data.get('image_url'),
            created_at=data.get('created_at')
        )
    
    def is_available(self) -> bool:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        return self.stock > 0

    def format_price(self) -> str:
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ø1,200.50)
        return f"‡∏ø{self.price:,.2f}"
    
    def get_stock_status(self) -> tuple[str, str]:
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å
        if self.stock > 10:
            return f"üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {self.stock}", "#32CD32" # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        elif self.stock > 0:
            return f"üì¶ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á {self.stock} ‡∏ä‡∏¥‡πâ‡∏ô", "#FFA500" # ‡∏™‡∏µ‡∏™‡πâ‡∏°
        else:
            return "‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î", "#D22B2B" # ‡∏™‡∏µ‡πÅ‡∏î‡∏á

@dataclass
class Order:
    order_id: int
    user_id: int
    total_amount: float
    status: str
    created_at: str
    shipping_address: str
    items: Optional[str] = None # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô None ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ JOIN)

    @classmethod
    def from_dict(cls, data):
        return cls(
            order_id=data['order_id'],
            user_id=data['user_id'],
            total_amount=data['total_amount'],
            status=data.get('status', 'pending'),
            created_at=data['created_at'],
            shipping_address=data.get('shipping_address', ''),
            items=data.get('items') # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        )

    def format_date(self) -> str:
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 29/10/2025 10:09)
        try:
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å format ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ISO
            dt_object = datetime.fromisoformat(self.created_at) 
            return dt_object.strftime("%d/%m/%Y %H:%M")
        except:
            # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ
            return self.created_at

    def format_total(self) -> str:
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        return f"‡∏ø{self.total_amount:,.2f}"

    def get_status_text(self) -> str:
        # ‡πÅ‡∏õ‡∏•‡∏á status ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        status_map = {
            "pending": "‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", 
            "confirmed": "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß", # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ confirmed
            "shipped": "üöö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", 
            "delivered": "‚úîÔ∏è ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
            "cancelled": "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        }
        return status_map.get(self.status, "‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞") # ‡πÉ‡∏ä‡πâ .get() ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô key ‡πÑ‡∏°‡πà‡∏°‡∏µ

    def get_status_color(self) -> str:
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏ï‡∏≤‡∏° status
        color_map = {
            "pending": "#FFC107",   # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            "confirmed": "#28A745", # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö delivered)
            "shipped": "#17A2B8",   # ‡∏ü‡πâ‡∏≤
            "delivered": "#28A745", # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            "cancelled": "#DC3545"  # ‡πÅ‡∏î‡∏á
        }
        return color_map.get(self.status, "gray") # ‡πÉ‡∏ä‡πâ .get()

# --- Session Management (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢) ---
class Session:
    # --- (‡∏•‡∏ö _instance ‡πÅ‡∏•‡∏∞ __new__ ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ) ---
    
    def __init__(self):
        """
        ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Singleton ‡πÅ‡∏•‡πâ‡∏ß
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ current_user ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object
        """
        self.current_user = None # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£ login

    def login(self, user: User):
        """
        ‡πÄ‡∏Å‡πá‡∏ö object User ‡∏ó‡∏µ‡πà login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        """
        self.current_user = user
   
    def logout(self):
        """
        ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
        """
        self.current_user = None
        
    def is_logged_in(self) -> bool:
        """
        ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        return self.current_user is not None # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà None
        
    def is_admin(self) -> bool:
        """
        ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á login ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢)
        """
        # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ is_logged_in() ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ñ‡πâ‡∏≤ current_user ‡πÄ‡∏õ‡πá‡∏ô None
        return self.is_logged_in() and self.current_user.is_admin()

# --- Cart Management ---
@dataclass
class CartItem:
    # ‡πÄ‡∏Å‡πá‡∏ö Product object ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    product: Product 
    quantity: int

    def get_total_price(self) -> float:
        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ = ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô * ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        return self.product.price * self.quantity
    
    def format_total_price(self) -> str:
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
        total = self.get_total_price()
        return f"‡∏ø{total:,.2f}"

class Cart:
    def __init__(self):
        """
        ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Singleton ‡πÅ‡∏•‡πâ‡∏ß
        ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö items ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object
        ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: { product_id: CartItem_object }
        """
        self.items = {} 

    def add_item(self, product: Product, quantity: int = 1):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
        product_id = product.product_id # ‡πÄ‡∏≠‡∏≤ ID ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô key
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if product_id in self.items:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            self.items[product_id].quantity += quantity
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á CartItem ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô dict
            new_cart_item = CartItem(product=product, quantity=quantity)
            self.items[product_id] = new_cart_item

    def remove_item(self, product_id: int):
        """‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ key ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
        if product_id in self.items:
            del self.items[product_id] # ‡∏•‡∏ö key ‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dict

    def update_quantity(self, product_id: int, quantity: int):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ key ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
        if product_id in self.items:
            if quantity > 0:
                # ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏Å‡πá‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ quantity
                self.items[product_id].quantity = quantity
            else:
                # ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡∏Å‡πá‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
                self.remove_item(product_id)

    def get_items(self) -> List[CartItem]:
        """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á CartItem object ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
        # self.items.values() ‡∏à‡∏∞‡πÑ‡∏î‡πâ object CartItem ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        return list(self.items.values()) 

    def get_total_price(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
        total = 0.0
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ CartItem ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        for item in self.get_items(): 
            total += item.get_total_price() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ get_total_price() ‡∏Ç‡∏≠‡∏á CartItem
        return total
    
    def format_total_price(self) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
        total = self.get_total_price()
        return f"‡∏ø{total:,.2f}"
        
    def clear(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏ó‡∏≥‡πÉ‡∏´‡πâ dict ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤)"""
        self.items = {}