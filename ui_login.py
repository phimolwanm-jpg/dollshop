# M:/doll_shop/ui_login.py (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç handle_register ‡πÅ‡∏•‡∏∞ placeholder)

import customtkinter as ctk
from tkinter import messagebox
import re # Import regular expression module for email validation

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (validate_email, show_message) ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
def validate_email(email: str) -> bool:
    return re.match(r"[^@]+@[^@]+\.[^@]+", email) is not None

def show_message(parent_window, title_text, message_text, severity_level="info"):
    if severity_level == "error":
        messagebox.showerror(title_text, message_text, parent=parent_window)
    elif severity_level == "warning":
        messagebox.showwarning(title_text, message_text, parent=parent_window)
    else:
        messagebox.showinfo(title_text, message_text, parent=parent_window)
# --- ‡∏à‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ---

class LoginWindow(ctk.CTkFrame):
    # ... (__init__ ‡πÅ‡∏•‡∏∞ toggle_password_visibility ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    def __init__(self, parent, main_app):
        super().__init__(parent, fg_color="#FFF0F5")
        self.main_app = main_app
        self.db = main_app.db
        self.setup_ui()

    def toggle_password_visibility(self, entry_widget, button_widget):
        current_show_state = entry_widget.cget("show")
        if current_show_state == "*":
            entry_widget.configure(show="")
            button_widget.configure(text="üëÅÔ∏è‚Äçüó®Ô∏è")
        else:
            entry_widget.configure(show="*")
            button_widget.configure(text="üëÅÔ∏è")

    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login/Register"""
        # --- 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        main_card = ctk.CTkFrame(self, width=850, height=600, corner_radius=25,
                                 fg_color="#FFFFFF", border_width=2, border_color="#FFEBEE")
        main_card.place(relx=0.5, rely=0.5, anchor="center")
        main_card.grid_propagate(False)
        main_card.grid_columnconfigure(0, weight=5)
        main_card.grid_columnconfigure(1, weight=6)
        main_card.grid_rowconfigure(0, weight=1)

        # --- 2. Frame ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        image_frame = ctk.CTkFrame(main_card, fg_color="#FFE4E1", corner_radius=20)
        image_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        character_image = self.main_app.load_image("character_image.png", size=(350, 500))
        image_label = ctk.CTkLabel(image_frame, text="", image=character_image)
        image_label.pack(expand=True)

        # --- 3. Frame ‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        form_frame = ctk.CTkFrame(main_card, fg_color="transparent")
        form_frame.grid(row=0, column=1, sticky="nsew", padx=(0, 40), pady=20)
        logo_image = self.main_app.load_image("logo.png", size=(100, 100))
        logo_label = ctk.CTkLabel(form_frame, text="", image=logo_image)
        logo_label.pack(pady=(20, 10))
        welcome_label1 = ctk.CTkLabel(form_frame, text="Welcome to Dollie Shop", font=("IBM Plex Sans Thai", 28, "bold"), text_color="#6D4C41")
        welcome_label1.pack()
        welcome_label2 = ctk.CTkLabel(form_frame, text="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà", font=("IBM Plex Sans Thai", 14), text_color="#BCAAA4")
        welcome_label2.pack(pady=(0, 20))
        tab_view = ctk.CTkTabview(form_frame, fg_color="transparent", border_width=1, border_color="#FFEBEE",
                                  segmented_button_selected_color="#FFB6C1", segmented_button_selected_hover_color="#FFC0CB",
                                  segmented_button_unselected_color="#FFFFFF", text_color="#6D4C41")
        tab_view.pack(fill="both", expand=True)
        self.login_tab_frame = tab_view.add("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        self.register_tab_frame = tab_view.add("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        self.tab_view = tab_view

        # --- 4. ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Tab ---

        # --- 4.1 Tab "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        login_user_frame = ctk.CTkFrame(self.login_tab_frame, fg_color="#FFF0F5", corner_radius=15, border_width=1, border_color="#FFEBEE")
        login_user_icon = self.main_app.load_image("user_icon.png", size=(20, 20))
        login_user_icon_label = ctk.CTkLabel(login_user_frame, text="", image=login_user_icon)
        login_user_icon_label.pack(side="left", padx=(10, 5))
        self.login_username_entry = ctk.CTkEntry(login_user_frame, placeholder_text="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", height=35, border_width=0, fg_color="transparent", font=("IBM Plex Sans Thai", 14))
        self.login_username_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        login_user_frame.pack(fill="x", pady=(20, 10), padx=10)
        login_pass_frame = ctk.CTkFrame(self.login_tab_frame, fg_color="#FFF0F5", corner_radius=15, border_width=1, border_color="#FFEBEE")
        login_pass_icon = self.main_app.load_image("lock_icon.png", size=(20, 20))
        login_pass_icon_label = ctk.CTkLabel(login_pass_frame, text="", image=login_pass_icon)
        login_pass_icon_label.pack(side="left", padx=(10, 5))
        self.login_password_entry = ctk.CTkEntry(login_pass_frame, placeholder_text="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", height=35, border_width=0, fg_color="transparent", font=("IBM Plex Sans Thai", 14), show="*")
        login_show_pass_button = ctk.CTkButton(
            login_pass_frame, text="üëÅÔ∏è", width=30, height=30,
            fg_color="transparent", hover=False, text_color="gray50",
            command=lambda: self.toggle_password_visibility(self.login_password_entry, login_show_pass_button)
        )
        login_show_pass_button.pack(side="right", padx=(0, 5))
        self.login_password_entry.pack(side="left", fill="x", expand=True, padx=(0, 0))
        login_pass_frame.pack(fill="x", pady=10, padx=10)
        login_button = ctk.CTkButton(self.login_tab_frame, text="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", height=45, corner_radius=20, font=("IBM Plex Sans Thai", 14, "bold"),
                                     fg_color="#FFB6C1", hover_color="#FFC0CB", text_color="white", command=self.handle_login)
        login_button.pack(fill="x", pady=20, padx=10)

        # --- 4.2 Tab "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Placeholder) ---
        reg_user_frame = ctk.CTkFrame(self.register_tab_frame, fg_color="#FFF0F5", corner_radius=15, border_width=1, border_color="#FFEBEE")
        reg_user_icon = self.main_app.load_image("user_icon.png", size=(20, 20))
        reg_user_icon_label = ctk.CTkLabel(reg_user_frame, text="", image=reg_user_icon)
        reg_user_icon_label.pack(side="left", padx=(10, 5))
        self.register_username_entry = ctk.CTkEntry(reg_user_frame, placeholder_text="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà 1+, ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ï‡∏±‡∏ß)", height=35, border_width=0, fg_color="transparent", font=("IBM Plex Sans Thai", 14)) # <--- ‡πÅ‡∏Å‡πâ placeholder
        self.register_username_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        reg_user_frame.pack(fill="x", pady=(10, 8), padx=10)

        # --- (Email, Fullname entries - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        reg_email_frame = ctk.CTkFrame(self.register_tab_frame, fg_color="#FFF0F5", corner_radius=15, border_width=1, border_color="#FFEBEE")
        reg_email_icon = self.main_app.load_image("email_icon.png", size=(20, 20))
        reg_email_icon_label = ctk.CTkLabel(reg_email_frame, text="", image=reg_email_icon)
        reg_email_icon_label.pack(side="left", padx=(10, 5))
        self.register_email_entry = ctk.CTkEntry(reg_email_frame, placeholder_text="‡∏≠‡∏µ‡πÄ‡∏°‡∏•", height=35, border_width=0, fg_color="transparent", font=("IBM Plex Sans Thai", 14))
        self.register_email_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        reg_email_frame.pack(fill="x", pady=8, padx=10)

        reg_name_frame = ctk.CTkFrame(self.register_tab_frame, fg_color="#FFF0F5", corner_radius=15, border_width=1, border_color="#FFEBEE")
        reg_name_icon = self.main_app.load_image("name_icon.png", size=(20, 20))
        reg_name_icon_label = ctk.CTkLabel(reg_name_frame, text="", image=reg_name_icon)
        reg_name_icon_label.pack(side="left", padx=(10, 5))
        self.register_fullname_entry = ctk.CTkEntry(reg_name_frame, placeholder_text="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", height=35, border_width=0, fg_color="transparent", font=("IBM Plex Sans Thai", 14))
        self.register_fullname_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        reg_name_frame.pack(fill="x", pady=8, padx=10)
        # --- (End Email, Fullname entries) ---

        reg_pass_frame = ctk.CTkFrame(self.register_tab_frame, fg_color="#FFF0F5", corner_radius=15, border_width=1, border_color="#FFEBEE")
        reg_pass_icon = self.main_app.load_image("lock_icon.png", size=(20, 20))
        reg_pass_icon_label = ctk.CTkLabel(reg_pass_frame, text="", image=reg_pass_icon)
        reg_pass_icon_label.pack(side="left", padx=(10, 5))
        self.register_password_entry = ctk.CTkEntry(reg_pass_frame, placeholder_text="‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (8+ ‡∏ï‡∏±‡∏ß, ‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏©‡∏£ 3+ ‡∏ï‡∏±‡∏ß)", height=35, border_width=0, fg_color="transparent", font=("IBM Plex Sans Thai", 14), show="*")
        register_show_pass_button = ctk.CTkButton(
            reg_pass_frame, text="üëÅÔ∏è", width=30, height=30,
            fg_color="transparent", hover=False, text_color="gray50",
            command=lambda: self.toggle_password_visibility(self.register_password_entry, register_show_pass_button)
        )
        register_show_pass_button.pack(side="right", padx=(0, 5))
        self.register_password_entry.pack(side="left", fill="x", expand=True, padx=(0, 0))
        reg_pass_frame.pack(fill="x", pady=8, padx=10)

        register_button = ctk.CTkButton(self.register_tab_frame, text="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", height=45, corner_radius=20, font=("IBM Plex Sans Thai", 14, "bold"),
                                        fg_color="#FFB6C1", hover_color="#FFC0CB", text_color="white", command=self.handle_register)
        register_button.pack(fill="x", pady=15, padx=10)


    # --- (‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô create_entry_with_icon, setup_login_tab, setup_register_tab) ---

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle_login (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
    def handle_login(self):
        username_input = self.login_username_entry.get().strip()
        password_input = self.login_password_entry.get()
        if not username_input or not password_input:
            show_message(self, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "warning")
            return

        user_data_from_db = self.db.authenticate_user(username_input, password_input)
        if user_data_from_db:
            self.main_app.on_login_success(user_data_from_db)
        else:
            show_message(self, "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error")

    # --- vvvv ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle_register vvvv ---
    def handle_register(self):
        """
        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏° Validation Rules)
        """
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å
        username_input = self.register_username_entry.get().strip()
        email_input = self.register_email_entry.get().strip()
        fullname_input = self.register_fullname_entry.get().strip()
        password_input = self.register_password_entry.get() # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á strip ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô

        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        # 2.1 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not username_input or not email_input or not fullname_input or not password_input:
            show_message(self, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á", "warning")
            return

        # --- 2.2 ‡πÄ‡∏ä‡πá‡∏Ñ Username: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß ---
        if not any(c.isupper() for c in username_input):
            show_message(self, "Username ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß", "warning")
            return

        # --- 2.2.1 ‡πÄ‡∏ä‡πá‡∏Ñ Username: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ï‡∏±‡∏ß ---
        if len(username_input) > 10:
            show_message(self, "Username ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", "warning")
            return
        # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ Username ---

        # 2.3 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        if not validate_email(email_input):
            show_message(self, "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error")
            return

        # 2.4 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 8 ‡∏ï‡∏±‡∏ß)
        if len(password_input) < 8:
            show_message(self, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡πâ‡∏ô‡πÑ‡∏õ", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", "warning")
            return

        # 2.5 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß
        letter_count = sum(c.isalpha() for c in password_input)
        if letter_count < 3:
             show_message(self, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (a-z, A-Z) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß", "warning")
             return

        # 2.6 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self.db.get_user(username_input):
             show_message(self, "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô", "error")
             return

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        new_user_id = self.db.create_user(username_input, password_input, email_input, fullname_input)

        # 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if new_user_id:
            show_message(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "info")
            self.tab_view.set("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            self.register_username_entry.delete(0, 'end')
            self.register_email_entry.delete(0, 'end')
            self.register_fullname_entry.delete(0, 'end')
            self.register_password_entry.delete(0, 'end')
        else:
            show_message(self, "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥)", "error")
    # --- ^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç handle_register ^^^^ ---