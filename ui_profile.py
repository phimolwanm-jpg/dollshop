import customtkinter as ctk
from tkinter import messagebox, filedialog
import bcrypt
import os
from PIL import Image # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pip install Pillow
import time # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏á)
PROFILE_IMG_DIR = "assets/profile_images"

class ProfileWindow(ctk.CTkFrame):
    def __init__(self, parent, main_app):
        super().__init__(parent, fg_color="#FFF0F5")  # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô Lavender Blush
        self.main_app = main_app
        self.session = main_app.session
        self.db = main_app.db
        self.new_image_file = None # ‡πÄ‡∏Å‡πá‡∏ö path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        if not os.path.exists(PROFILE_IMG_DIR):
            os.makedirs(PROFILE_IMG_DIR)

    def on_show(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ"""
        for widget in self.winfo_children():
            widget.destroy()
        self.setup_ui()

    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        # vvvv ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) vvvv
        if not self.session.current_user:
            self.grid_columnconfigure(0, weight=1)
            self.grid_rowconfigure(0, weight=1)
            
            warning_frame = ctk.CTkFrame(self, fg_color="transparent")
            warning_frame.pack(expand=True)
            
            ctk.CTkLabel(warning_frame, text="‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‚ùå", font=ctk.CTkFont(size=24, weight="bold"), text_color="#FF6B9D").pack(padx=50, pady=(100, 20))
            ctk.CTkButton(
                warning_frame, 
                text="‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô", 
                command=lambda: self.main_app.navigate_to('LoginWindow'),
                font=ctk.CTkFont(size=16),
                fg_color="#FFB6C1",
                hover_color="#FFC0CB",
                text_color="white"
            ).pack(pady=10, ipady=5)
            return
        # ^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ^^^^

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

        # --- Header ---
        header_frame = ctk.CTkFrame(self, fg_color="#FFFFFF", corner_radius=0, height=70, border_width=1, border_color="#FFEBEE")
        header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 20))
        header_frame.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(
            header_frame, 
            text="üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", 
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color="#FFB6C1"
        ).pack(side="left", padx=30, pady=20)
        
        back_button = ctk.CTkButton(
            header_frame, 
            text="< ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", 
            fg_color="transparent", 
            text_color="#FFB6C1",
            hover_color="#FFE4E1",
            font=ctk.CTkFont(size=14),
            command=lambda: self.main_app.navigate_to('HomeWindow')
        )
        back_button.pack(side="right", padx=30, pady=20)
        
        # --- Main Content Frame ---
        content_frame = ctk.CTkFrame(self, fg_color="transparent")
        content_frame.grid(row=1, column=0, padx=30, pady=10, sticky="nsew")
        content_frame.grid_columnconfigure((0, 1), weight=1, uniform="group1")
        content_frame.grid_rowconfigure(0, weight=1)

        self.create_profile_panel(content_frame)
        self.create_password_panel(content_frame)

    def create_profile_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå)"""
        panel = ctk.CTkFrame(parent, fg_color="#FFFFFF", corner_radius=20, border_width=2, border_color="#FFEBEE")
        panel.grid(row=0, column=0, sticky="nsew", padx=(0, 10), pady=10)
        panel.grid_columnconfigure(0, weight=1)

        # Header ‡∏Ç‡∏≠‡∏á Panel
        header = ctk.CTkFrame(panel, fg_color="#FFE4E1", corner_radius=15)
        header.grid(row=0, column=0, padx=20, pady=20, sticky="ew")
        ctk.CTkLabel(
            header, 
            text="‚ú® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", 
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#6D4C41"
        ).pack(pady=15)

        user = self.session.current_user
        row_counter = 1
        
        # --- (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°) ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ---
        ctk.CTkLabel(
            panel, 
            text="‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:", 
            font=ctk.CTkFont(size=14),
            text_color="#6D4C41"
        ).grid(row=row_counter, column=0, padx=30, pady=(15, 5), sticky="w")
        
        img_frame = ctk.CTkFrame(panel, fg_color="transparent")
        img_frame.grid(row=row_counter + 1, column=0, padx=30, pady=(0, 10), sticky="ew")
        img_frame.grid_columnconfigure(0, weight=1)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏π‡∏õ Default
        self.current_img_path = user.profile_image_url if user.profile_image_url else 'assets/default_profile.png'
        
        try:
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            img_full_path = os.path.join(PROFILE_IMG_DIR, self.current_img_path) if user.profile_image_url else self.current_img_path
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ
            self.profile_img = ctk.CTkImage(Image.open(img_full_path).resize((60, 60), Image.LANCZOS), size=(60, 60))
            
        except:
            # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ default ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ default_profile.png ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô assets)
            default_path = 'assets/default_profile.png'
            if os.path.exists(default_path):
                 self.profile_img = ctk.CTkImage(Image.open(default_path).resize((60, 60), Image.LANCZOS), size=(60, 60))
            else:
                 self.profile_img = ctk.CTkImage(Image.open(self.main_app.assets.get_image('default_icon')), size=(60, 60)) # fallback 

        self.img_label = ctk.CTkLabel(img_frame, image=self.profile_img, text="", compound="left")
        self.img_label.grid(row=0, column=0, sticky="w", padx=(0, 10))

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ
        select_img_btn = ctk.CTkButton(
            img_frame, 
            text="üñºÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà", 
            command=self.select_profile_image, 
            corner_radius=15,
            font=ctk.CTkFont(size=14),
            fg_color="#FFC0CB",
            hover_color="#FFB6C1",
            text_color="white"
        )
        select_img_btn.grid(row=0, column=1, sticky="w")
        
        row_counter += 2
        
        # --- (‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠) ---
        fields = {
            "full_name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:", 
            "email": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•:", 
            "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:", 
            "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:"
        }
        self.profile_entries = {}
        
        for key, label in fields.items():
            # Label
            ctk.CTkLabel(
                panel, 
                text=label, 
                font=ctk.CTkFont(size=14),
                text_color="#6D4C41"
            ).grid(row=row_counter, column=0, padx=30, pady=(15, 5), sticky="w")
            
            # Entry (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (address) ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
            if key == "address":
                entry = ctk.CTkTextbox(
                    panel, 
                    height=100, 
                    corner_radius=15,
                    border_width=1,
                    border_color="#FFEBEE",
                    fg_color="#FFF0F5",
                    font=ctk.CTkFont(size=14)
                )
                entry.insert("1.0", getattr(user, key) or "")
            else:
                entry = ctk.CTkEntry(
                    panel, 
                    height=45,
                    corner_radius=15,
                    border_width=1,
                    border_color="#FFEBEE",
                    fg_color="#FFF0F5",
                    font=ctk.CTkFont(size=14)
                )
                entry.insert(0, getattr(user, key) or "")
            
            # Email ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            if key == "email": 
                entry.configure(state="disabled", text_color="gray50")

            entry.grid(row=row_counter + 1, column=0, padx=30, pady=(0, 10), sticky="ew")
            self.profile_entries[key] = entry
            row_counter += 2
            
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        save_btn = ctk.CTkButton(
            panel, 
            text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", 
            command=self.save_profile, 
            height=45,
            corner_radius=15,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#FFB6C1",
            hover_color="#FFC0CB",
            text_color="white"
        )
        save_btn.grid(row=row_counter, column=0, sticky="ew", padx=30, pady=25)

    def create_password_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)"""
        panel = ctk.CTkFrame(parent, fg_color="#FFFFFF", corner_radius=20, border_width=2, border_color="#FFEBEE")
        panel.grid(row=0, column=1, sticky="nsew", padx=(10, 0), pady=10)
        panel.grid_columnconfigure(0, weight=1)

        # Header ‡∏Ç‡∏≠‡∏á Panel
        header = ctk.CTkFrame(panel, fg_color="#FFE4E1", corner_radius=15)
        header.grid(row=0, column=0, padx=20, pady=20, sticky="ew")
        ctk.CTkLabel(
            header, 
            text="üîí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", 
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#6D4C41"
        ).pack(pady=15)
        
        fields = {
            "current_password": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:", 
            "new_password": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:", 
            "confirm_password": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:"
        }
        self.password_entries = {}

        row_counter = 1
        for key, label in fields.items():
            # Label
            ctk.CTkLabel(
                panel, 
                text=label, 
                font=ctk.CTkFont(size=14),
                text_color="#6D4C41"
            ).grid(row=row_counter, column=0, padx=30, pady=(15, 5), sticky="w")
            
            # Entry
            entry = ctk.CTkEntry(
                panel, 
                show="*",
                height=45,
                corner_radius=15,
                border_width=1,
                border_color="#FFEBEE",
                fg_color="#FFF0F5",
                font=ctk.CTkFont(size=14)
            )
            entry.grid(row=row_counter + 1, column=0, padx=30, pady=(0, 10), sticky="ew")
            self.password_entries[key] = entry
            row_counter += 2
            
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        change_btn = ctk.CTkButton(
            panel, 
            text="üîê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", 
            command=self.change_password, 
            height=45,
            corner_radius=15,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#FF6B9D",
            hover_color="#FF8FB3",
            text_color="white"
        )
        change_btn.grid(row=row_counter, column=0, sticky="ew", padx=30, pady=25)
        
    def select_profile_image(self):
        """‡πÄ‡∏õ‡∏¥‡∏î Dialog ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        filetypes = [("Image files", "*.png *.jpg *.jpeg")]
        filepath = filedialog.askopenfilename(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", filetypes=filetypes)
        
        if filepath:
            self.new_image_file = filepath
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô UI
            try:
                new_img = ctk.CTkImage(Image.open(filepath).resize((60, 60), Image.LANCZOS), size=(60, 60))
                self.img_label.configure(image=new_img)
                self.img_label.image = new_img # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÇ‡∏î‡∏¢ garbage collector
            except Exception as e:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}", parent=self)
                self.new_image_file = None

    def save_profile(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        if not self.session.current_user:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", parent=self)
            return

        full_name = self.profile_entries['full_name'].get().strip()
        phone = self.profile_entries['phone'].get().strip()
        address = self.profile_entries['address'].get("1.0", "end-1c").strip()
        
        # 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà)
        new_image_filename = self.session.current_user.profile_image_url # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        if self.new_image_file:
            try:
                # 1.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                ext = os.path.splitext(self.new_image_file)[1]
                # ‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏•‡∏∞ timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                new_image_filename = f"profile_{self.session.current_user.user_id}_{int(time.time())}{ext}" 
                
                # 1.2 ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å/‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
                dest_path = os.path.join(PROFILE_IMG_DIR, new_image_filename)
                
                img = Image.open(self.new_image_file)
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                img.save(dest_path) 
                
                # 1.3 ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ default)
                old_filename = self.session.current_user.profile_image_url
                if old_filename and old_filename != 'default_profile.png':
                    old_path = os.path.join(PROFILE_IMG_DIR, old_filename)
                    if os.path.exists(old_path):
                        os.remove(old_path)
                        
            except Exception as e:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}", parent=self)
                return

        if not full_name:
            messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", parent=self)
            return

        user_id = self.session.current_user.user_id
        
        # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
        if self.db.update_user_profile(user_id, full_name, phone, address, new_image_filename):
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session ‡∏î‡πâ‡∏ß‡∏¢
            self.session.current_user.full_name = full_name
            self.session.current_user.phone = phone
            self.session.current_user.address = address
            self.session.current_user.profile_image_url = new_image_filename # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
            
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", parent=self)
            self.new_image_file = None # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            self.on_show() # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
        else:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", parent=self)

    def change_password(self):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)"""
        if not self.session.current_user:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", parent=self)
            return

        current_pass = self.password_entries['current_password'].get()
        new_pass = self.password_entries['new_password'].get()
        confirm_pass = self.password_entries['confirm_password'].get()

        if not all([current_pass, new_pass, confirm_pass]):
            messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á", parent=self)
            return
        
        if new_pass != confirm_pass:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", parent=self)
            return
        
        if len(new_pass) < 6:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", parent=self)
            return
            
        user_id = self.session.current_user.user_id
        user_data = self.db.get_user_by_id(user_id)
        
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏ô database.py ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á)
        if not user_data or user_data['password'] != current_pass:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", parent=self)
            return
            
        if self.db.update_user_password(user_id, new_pass):
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", parent=self)
            # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            for entry in self.password_entries.values():
                entry.delete(0, 'end')
        else:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ", parent=self)